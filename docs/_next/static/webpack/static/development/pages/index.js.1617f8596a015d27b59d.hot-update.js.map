{"version":3,"file":"static/webpack/static/development/pages/index.js.1617f8596a015d27b59d.hot-update.js","sources":["webpack:///./components/Deck.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-with-gesture'\nimport Card from './Card.js'\n// import './styles.css'\n\nexport default function Deck(props) {\n  // These two are just helpers, they curate spring data, values that are later being interpolated into css\n  const to = i => ({ x: 0, y: i * -1, scale: 1, rot: -1 + Math.random() * 2, delay:0})\n  const from = i => ({ x: 0, rot: 0, scale: 1, y: i * -1 })\n  // This is being used down there in the view, it interpolates rotation and scale into a css transform\n  const trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [springs, set] = useSprings(props.cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === props.cards.length)\n      setTimeout(() => {\n        gone.clear() || set(i => to(i))\n        // props.nextPageFunc()\n      }, 400)\n  })\n\n  let cardStyle = {\n      position: 'absolute',\n      width: '100%',\n      willChange: 'transform',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n  }\n\n  let divStyle = {\n    backgroundColor: 'white',\n    width: '100vh',\n    maxWidth: '300px',\n    height: '100vh',\n    maxHeight: '300px',\n    willChange: 'transform',\n    borderRadius: '10px',\n    margin: '10px',\n    boxShadow: '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)',\n    overflow: 'hidden',\n  }\n\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return springs.map(({ x, y, rot, scale }, i) => (\n    <animated.div className=\"card\" key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`),position: 'absolute',\n    width: '100%',\n    willChange: 'transform',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center', } }>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)}\n      style={{\n      transform: interpolate([rot, scale], trans),backgroundColor: 'white',\n      width: '250px',\n      height: '350px',\n      willChange: 'transform',\n      borderRadius: '2px',\n      boxShadow: '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)',\n      overflow: 'hidden',\n      }}>\n        <Card picUrl={props.cards[i].src} playerData={props.playerData[i]} moreData={props.moreData[i]}/>\n      </animated.div>\n    </animated.div>\n  ))\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAMA;AAAA;AANA;AAAA;AACA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAQA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBA;AAsBA;;;;A","sourceRoot":""}